/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '3.3.1'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '3.3.4'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'snout.notes.api.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register("dockerComposeUp", Exec) {
    group = "Docker"
    description = "Starts the Docker container using docker-compose."
    commandLine("docker-compose", "up", "-d")
}

tasks.named("bootRun") {
    dependsOn("dockerComposeUp")
}